package com.onkar.service;

import com.onkar.service.supp.MyDate;

public class DateDifferenceProvider {
	static final int JAN = 31;
	static final int FEB = 28;
	static final int MAR = 31;
	static final int APR = 30;
	static final int MAY = 31;
	static final int JUN = 30;
	static final int JUL = 31;
	static final int AUG = 31;
	static final int SEP = 30;
	static final int OCT = 31;
	static final int NOV = 30;
	static final int DEC = 31;

	int[] months = { JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC };

	public int getDateDifference(MyDate startDate, MyDate endDate) {
		if (sameDate(startDate, endDate) && sameMonth(startDate, endDate) && sameYear(startDate, endDate)) {
			return 0;
		} else if (sameMonth(startDate, endDate) && sameYear(startDate, endDate)) {
			return endDate.getDd() - startDate.getDd();
		} else if (sameYear(startDate, endDate)) {
			return remainingDaysOfMonth(startDate) + daysInIntervingMonth(startDate, endDate) + endDate.getDd();
		} else {
			return remainingDaysOfMonth(startDate) + remainingDaysInYear(startDate) + leadingYear(endDate)
					+ daysInInterveningYear(startDate, endDate);
		}

	}

	private boolean sameDate(MyDate startDate, MyDate endDate) {
		return endDate.getDd() == startDate.getDd();
	}

	private boolean sameMonth(MyDate startDate, MyDate endDate) {
		return endDate.getMm() == startDate.getMm();
	}

	private boolean sameYear(MyDate startDate, MyDate endDate) {
		return endDate.getYyyy() == startDate.getYyyy();
	}

	private int remainingDaysOfMonth(MyDate date) {
		return months[date.getMm() - 1] - date.getDd();
	}

	private int daysInIntervingMonth(MyDate startDate, MyDate endDate) {
		int totalDays = 0;
		for (int index = startDate.getMm() + 1; index < endDate.getMm(); index++) {
			totalDays += months[index - 1];
		}
		return totalDays;

	}

	private int daysInInterveningYear(MyDate startDate, MyDate endDate) {

		int remainingdays = 0;

		for (int year = startDate.getYyyy() + 1; year < endDate.getYyyy(); year++) {

			remainingdays = remainingdays + 28;
		}

		return remainingdays;
	}

	private int remainingDaysInYear(MyDate startDate) {

		int daysRemaining = 0;

		for (int index = startDate.getMm() + 1; index <= 12; index++) {
			daysRemaining = daysRemaining + months[index - 1];
		}

		return daysRemaining;

	}

	private int leadingYear(MyDate endDate) {

		int daysRemaining = 0;

		for (int month = 1; month < endDate.getMm(); month++) {
			daysRemaining = daysRemaining + months[month - 1];
		}

		daysRemaining = daysRemaining + endDate.getDd();
		return daysRemaining;
	}

}




package com.onkar.test;

import com.onkar.service.DateDifferenceProvider;
import com.onkar.service.supp.MyDate;
import com.onkar.service.supp.MyTestRecord;

public class TestDateDiffernceProvider {
	public static void main(String[] args) {
		DateDifferenceProvider provider = new DateDifferenceProvider();
		MyTestRecord[] myTestRecords = new MyTestRecord[7];
		myTestRecords[0] = new MyTestRecord(new MyDate(20, 11, 2018), new MyDate(20, 11, 2018), 0);
		myTestRecords[1] = new MyTestRecord(new MyDate(20, 11, 2018), new MyDate(27, 11, 2018), 7);
		myTestRecords[2] = new MyTestRecord(new MyDate(06, 04, 2011), new MyDate(18, 05, 2011), 42);
		myTestRecords[3] = new MyTestRecord(new MyDate(06, 04, 2011), new MyDate(18, 06, 2011), 73);
		myTestRecords[4] = new MyTestRecord(new MyDate(06, 04, 2011), new MyDate(18, 12, 2011), 256);
		myTestRecords[5] = new MyTestRecord(new MyDate(06, 04, 2013), new MyDate(18, 12, 2014), 621);
		myTestRecords[6] = new MyTestRecord(new MyDate(06, 04, 2011), new MyDate(18, 12, 2013), 987);

		/*
		 * for (MyTestRecord testRecord : myTestRecords) { int calculatedDiff =
		 * DateDifferenceProvider.getDateDifference(testRecord.getStartDate(),
		 * testRecord.getEndDate()); if (calculatedDiff ==
		 * testRecord.getActualDiffernce()) { System.out.println("Test Case passed"); }
		 * else { System.err.println("Test Case failed"); } }
		 */

		for (int index=0; index < myTestRecords.length; index++) {
			int calculatedDiff = provider.getDateDifference(myTestRecords[index].getStartDate(),
					myTestRecords[index].getEndDate());
			if (calculatedDiff == myTestRecords[index].getActualDiffernce()) {
				System.out.println("Test Case passed");
			} else {
				System.err.println("Test Case failed"+" Actual =" + myTestRecords[index].getActualDiffernce()+ " calculated ="+ calculatedDiff);
			}
		}
	}

}






package com.onkar.service.supp;

public class MyTestRecord {
	
	MyDate startDate;
	MyDate endDate;
	int actualDiffernce;
	
	public MyTestRecord(MyDate startDate, MyDate endDate, int actualDiffernce) {
		super();
		this.startDate = startDate;
		this.endDate = endDate;
		this.actualDiffernce = actualDiffernce;
	}

	public MyDate getStartDate() {
		return startDate;
	}

	public void setStartDate(MyDate startDate) {
		this.startDate = startDate;
	}

	public MyDate getEndDate() {
		return endDate;
	}

	public void setEndDate(MyDate endDate) {
		this.endDate = endDate;
	}

	public int getActualDiffernce() {
		return actualDiffernce;
	}

	public void setActualDiffernce(int actualDiffernce) {
		this.actualDiffernce = actualDiffernce;
	}
	
	
	
	

}


ackage com.onkar.service.supp;

public class MyDate {
	private int dd;
	private int mm;
	private int yyyy;
	
	public MyDate(int dd, int mm, int yyyy) {
		super();
		this.dd = dd;
		this.mm = mm;
		this.yyyy = yyyy;
	}

	public int getDd() {
		return dd;
	}

	public void setDd(int dd) {
		this.dd = dd;
	}

	public int getMm() {
		return mm;
	}

	public void setMm(int mm) {
		this.mm = mm;
	}

	public int getYyyy() {
		return yyyy;
	}

	public void setYyyy(int yyyy) {
		this.yyyy = yyyy;
	}

	@Override
	public String toString() {
		return "MyDate [dd=" + dd + ", mm=" + mm + ", yyyy=" + yyyy + "]";
	}
	
	
	
	
	

}



